<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <welcome-file-list>
        <welcome-file>pages/back/jsp/log.jsp</welcome-file>
<!--        <welcome-file>/front/jsp/jqueryui.jsp</welcome-file>-->
<!--        <welcome-file></welcome-file>-->
    </welcome-file-list>

    <!-- Spring和mybatis的配置文件 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring-mybatis.xml</param-value>
    </context-param>

    <!-- Spring MVC servlet -->
    <servlet>
        <servlet-name>SpringMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup><!--表示启动容器时初始化该Servlet-->
    </servlet>
    <servlet-mapping>
        <servlet-name>SpringMVC</servlet-name>
        <!-- 不会匹配到*.jsp，即：*.jsp不会进入spring的 DispatcherServlet类, 会匹配到/login这样的路径型url，不会匹配到模式为*.jsp这样的后缀型url -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- Spring监听器 很关键-->
    <!--    ContextLoaderListener的作用就是启动Web容器时，自动装配-->
    <!--    ApplicationContext.xml的配置信息。因为它实现了ServletContextListener这个接口，在web.xml配置这个监听器，启动容器时，就会默认执行它实现的方法。-->

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!-- 防止Spring内存溢出监听器 -->
    <!--    <listener>-->
    <!--        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>-->
    <!--    </listener>-->
</web-app>